name: Auto Build and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:  # 允许手动触发

env:
  FRAMEWORK_NAME: DooPushSDK

jobs:
  build-and-release:
    runs-on: macos-14  # 使用 macOS 14 (支持 Xcode 16)
    permissions:
      contents: write  # 允许创建标签和发布
      packages: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录用于版本检测
          
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'
          
      - name: Cache Xcode DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-deriveddata-${{ hashFiles('Package.swift', 'DooPushSDK.podspec', 'Sources/**/*.swift') }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-
            
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            build
            output
          key: ${{ runner.os }}-build-${{ hashFiles('Package.swift', 'DooPushSDK.podspec', 'Sources/**/*.swift') }}
          restore-keys: |
            ${{ runner.os }}-build-
            
      - name: Extract version from podspec
        id: version
        run: |
          echo "🔍 开始提取版本号..."

          if [ -f "DooPushSDK.podspec" ]; then
            echo "✅ 找到 DooPushSDK.podspec 文件"

            # 显示版本相关行用于调试
            echo "📋 podspec 版本行:"
            grep -n "spec.version" DooPushSDK.podspec || echo "未找到 spec.version 行"

            # 提取版本号（支持单引号和双引号）
            VERSION=$(grep -E "spec\.version\s*=\s*['\"][^'\"]+['\"]" DooPushSDK.podspec | grep -oE "[0-9]+\.[0-9]+\.[0-9]+" | head -1)

            if [ ! -z "$VERSION" ]; then
              echo "✅ 检测到版本: $VERSION"
              echo "version=$VERSION" >> $GITHUB_OUTPUT
            else
              echo "❌ 未能提取版本号"
              echo "📋 podspec 文件内容预览:"
              head -10 DooPushSDK.podspec
              exit 1
            fi
          else
            echo "❌ 找不到 DooPushSDK.podspec 文件"
            echo "📁 当前目录内容:"
            ls -la
            exit 1
          fi
          
      - name: Check if release exists
        id: check_release
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if gh release view "v$VERSION" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⚠️ 版本 v$VERSION 的 Release 已存在，将删除后重新发布"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ 版本 v$VERSION 是新版本，将创建 Release"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up existing release and tag
        if: steps.check_release.outputs.exists == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "🧹 清理现有版本: v$VERSION"

          # 删除现有的 Release
          echo "删除 Release..."
          gh release delete "v$VERSION" --yes || echo "Release 删除失败或不存在"

          # 删除本地和远程标签
          echo "删除 Git 标签..."
          git tag -d "v$VERSION" 2>/dev/null || echo "本地标签不存在"
          git push origin :refs/tags/"v$VERSION" 2>/dev/null || echo "远程标签删除失败或不存在"

          echo "✅ 清理完成，继续发布新版本"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build Framework
        run: |
          echo "🚀 开始构建 Framework..."
          
          # 确保脚本有执行权限
          if [ -f "scripts/build.sh" ]; then
            chmod +x scripts/build.sh
            echo "✅ 找到构建脚本"
          else
            echo "❌ 找不到构建脚本 scripts/build.sh"
            exit 1
          fi
          
          # 运行构建脚本并捕获输出
          if ./scripts/build.sh; then
            echo "✅ Framework 构建成功"
          else
            echo "❌ Framework 构建失败"
            exit 1
          fi
          
      - name: Verify Framework
        run: |
          FRAMEWORK_PATH="output/${FRAMEWORK_NAME}.framework"
          if [ -d "$FRAMEWORK_PATH" ]; then
            echo "✅ Framework 构建成功"
            echo "📊 Framework 信息:"
            ls -la "$FRAMEWORK_PATH"
            
            if [ -f "$FRAMEWORK_PATH/$FRAMEWORK_NAME" ]; then
              echo "📋 支持架构:"
              lipo -info "$FRAMEWORK_PATH/$FRAMEWORK_NAME" || echo "单一架构"
            fi
          else
            echo "❌ Framework 构建失败"
            exit 1
          fi
          
      - name: Create Framework ZIP
        run: |
          cd output
          zip -r "${FRAMEWORK_NAME}.framework.zip" "${FRAMEWORK_NAME}.framework"
          echo "✅ 创建 ZIP 包: ${FRAMEWORK_NAME}.framework.zip"
          
      - name: Generate Release Notes
        id: release_notes
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # 获取最近的提交记录
          if git tag | grep -q "v"; then
            LAST_TAG=$(git tag | grep "^v" | sort -V | tail -1)
            COMMITS=$(git log --oneline --no-merges "${LAST_TAG}..HEAD" | head -10)
          else
            COMMITS=$(git log --oneline --no-merges | head -10)
          fi
          
          # 生成发布说明
          cat > release_notes.md << EOF
          ## DooPushSDK v${VERSION}
          
          ### 📱 Framework 信息
          - **最低支持**: iOS 12.0+
          - **Xcode 版本**: 16.0+
          - **Swift 版本**: 5.9+
          
          ### 📦 集成方式
          
          #### Framework 集成
          1. 下载 \`DooPushSDK.framework.zip\`
          2. 解压并拖拽到 Xcode 项目中
          3. 设置为 "Embed & Sign"
          
          #### Swift Package Manager
          \`\`\`swift
          dependencies: [
              .package(url: "https://github.com/doopush/doopush-ios-sdk.git", from: "${VERSION}")
          ]
          \`\`\`
          
          #### CocoaPods
          \`\`\`ruby
          pod 'DooPushSDK', '~> ${VERSION}'
          \`\`\`
          
          ### 🔗 相关链接
          - [文档](https://doopush.com/docs)
          - [集成指南](https://doopush.com/docs/sdk/ios-integration)
          - [示例项目 Swift](https://github.com/doopush/doopush/tree/main/sdk/ios/DooPushSDKExample)
          - [示例项目 Objective-C](https://github.com/doopush/doopush/tree/main/sdk/ios/DooPushSDKExample-ObjC)
          EOF
          
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT
          
      - name: Create Git Tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "🏷️ 创建 Git 标签: v$VERSION"
          git config user.name "DooPush Bot"
          git config user.email "bot@doopush.com"
          git tag "v$VERSION"
          git push origin "v$VERSION"
          echo "✅ Git 标签创建成功"

      - name: Create GitHub Release
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          RELEASE_NOTES_FILE="${{ steps.release_notes.outputs.release_notes_file }}"

          echo "🎉 创建 Release: DooPushSDK v$VERSION"

          # 等待一秒确保标签已同步
          sleep 2

          # 使用 GitHub CLI 创建 release 并上传文件
          gh release create "v$VERSION" \
            --title "DooPushSDK v$VERSION" \
            --notes-file "$RELEASE_NOTES_FILE" \
            --draft=false \
            --prerelease=false \
            "output/${{ env.FRAMEWORK_NAME }}.framework.zip" \
            "DooPushSDK.podspec"

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Summary
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [ "${{ steps.check_release.outputs.exists }}" = "true" ]; then
            echo "🔄 DooPushSDK v$VERSION 重新发布成功!"
            echo "📦 删除了旧版本，创建了新版本"
          else
            echo "🎉 DooPushSDK v$VERSION 新版本发布成功!"
          fi
          echo "📦 Release URL: https://github.com/doopush/doopush-ios-sdk/releases/tag/v$VERSION"
          echo "📱 Framework: DooPushSDK.framework.zip"
          echo "📄 Podspec: DooPushSDK.podspec"
